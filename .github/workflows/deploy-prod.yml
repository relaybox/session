name: Deploy production

on:
  release:
    types: [published]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  APP_NAME: relaybox
  CLUSTER_NAME: core-services
  SERVICE_NAME: session

jobs:
  build-image:
    name: build-image
    runs-on: ubuntu-latest
    environment:
      name: production
    outputs:
      tag: ${{ steps.build-image.outputs.tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Build Docker image
        id: build-image
        run: |
          npm run build
          docker build -t ${{ env.SERVICE_NAME }}:${{ github.sha }} .
          echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Save Docker image as artifact
        run: |
          docker save ${{ env.SERVICE_NAME }}:${{ github.sha }} -o ${{ github.sha }}.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ${{ github.sha }}.tar
          retention-days: 7

  deploy:
    name: deploy:prod
    runs-on: ubuntu-latest
    needs: build-image
    environment:
      name: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          audience: sts.amazonaws.com
          role-to-assume: ${{ vars.AWS_CI_DEPLOYER_ROLE_ARN }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download Docker image from artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image from artifact
        run: docker load -i ${{ needs.build-image.outputs.tag }}.tar

      - name: Tag and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY }}
          ECR_IMAGE_TAG: ${{ github.sha }}
          BUILD_IMAGE_TAG: ${{ needs.build-image.outputs.tag }}
        run: |
          ECR_IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG"
          docker tag ${{ env.SERVICE_NAME }}:$BUILD_IMAGE_TAG $ECR_IMAGE
          docker push $ECR_IMAGE
          echo "image=$ECR_IMAGE" >> $GITHUB_OUTPUT

      - name: Render task definition with environment variables and secrets
        env:
          IMAGE: ${{ steps.build-image.outputs.image }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          CRON_SCHEDULE_MINS: ${{ vars.CRON_SCHEDULE_MINS }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_NAME: ${{ vars.DB_NAME }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_PROXY_ENABLED: ${{ vars.DB_PROXY_ENABLED }}
          DB_IDLE_TIMEOUT_MS: ${{ vars.DB_IDLE_TIMEOUT_MS }}
          DB_MAX_CONNECTIONS: ${{ vars.DB_MAX_CONNECTIONS }}
          DB_USER: ${{ vars.DB_USER }}
          DB_TLS_DISABLED: ${{ vars.DB_TLS_DISABLED }}
          RABBIT_MQ_CONNECTION_STRING: ${{ vars.RABBIT_MQ_CONNECTION_STRING }}
          RABBIT_MQ_QUEUE_COUNT: ${{ vars.RABBIT_MQ_QUEUE_COUNT }}
          REDIS_HOST: ${{ vars.REDIS_HOST }}
          REDIS_PORT: ${{ vars.REDIS_PORT }}
          REDIS_AUTH_ARN: ${{ vars.REDIS_AUTH_ARN }}
          WS_IDLE_TIMEOUT_MS: ${{ vars.WS_IDLE_TIMEOUT_MS }}
          DB_PASSWORD_ARN: ${{ vars.DB_PASSWORD_ARN }}
          RDS_ROOT_CERTIFICATE_ARN: ${{ vars.RDS_ROOT_CERTIFICATE_ARN }}
        run: |
          envsubst < ecs/${{vars.STAGE}}/task-definition.json > ecs-task-definition.json

      - name: Register ECS task definition
        id: register-task
        run: |
          TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://ecs-task-definition.json \
            --region ${{ vars.AWS_REGION }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task-definition-arn=$TASK_DEFINITION_ARN" >> $GITHUB_OUTPUT

      - name: Deploy Amazon ECS service
        run: |
          aws ecs update-service \
            --region ${{ vars.AWS_REGION }} \
            --cluster ${{env.APP_NAME}}-${{ env.CLUSTER_NAME }}-${{vars.STAGE}}-ecs-cluster-ECSCluster-9pkS9BJE3t40 \
            --service ${{env.APP_NAME}}-${{ env.SERVICE_NAME }}-${{vars.STAGE}}-ecs-service-ECSService-HcnXKEogkl4w \
            --task-definition ${{ steps.register-task.outputs.task-definition-arn }} \
            --force-new-deployment

  publish-docker-image:
    name: publish-docker-image
    runs-on: ubuntu-latest
    needs:
      - build-image
      - deploy
    environment:
      name: production

    steps:
      - name: Download Docker image from artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image from artifact
        run: docker load -i ${{ needs.build-image.outputs.tag }}.tar

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${{ github.event.release.tag_name }}
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Validate version extraction
        run: |
          if [ -z "${{ steps.get_version.outputs.version }}" ]; then
            echo "Error: Version could not be extracted from the tag."
            exit 1
          fi

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ vars.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Tag and push to dockerhub
        env:
          BUILD_IMAGE_TAG: ${{ needs.build-image.outputs.tag }}
          VERSION_TAG: ${{ steps.get_version.outputs.version }}
        run: |
          IMAGE_NAME="relaybox/${{ env.SERVICE_NAME }}"
          docker tag ${{ env.SERVICE_NAME }}:$BUILD_IMAGE_TAG $IMAGE_NAME:latest
          docker tag ${{ env.SERVICE_NAME }}:$BUILD_IMAGE_TAG $IMAGE_NAME:$VERSION_TAG
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$VERSION_TAG

  update-package-version:
    name: update-package-version
    runs-on: ubuntu-latest
    needs:
      - deploy
    permissions:
      contents: write
    environment:
      name: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Update package version
        run: |
          VERSION=${{ github.ref_name }}
          npm version ${VERSION#v} --no-git-tag-version

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore: update package version [skip ci]'
          commit_author: GitHub Actions <actions@github.com>
          branch: main
