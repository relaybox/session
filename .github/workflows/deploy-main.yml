name: Deploy development

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  APP_NAME: relaybox
  CLUSTER_NAME: core-services
  SERVICE_NAME: session

jobs:
  build-app:
    name: build:application
    runs-on: ubuntu-latest
    environment:
      name: development
    outputs:
      commit_sha: ${{ steps.set-output.outputs.sha }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build

      - name: Set Commit SHA Output
        id: set-output
        run: echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./build
          retention-days: 7

  build-amd64-image:
    name: build:amd64-image
    runs-on: ubuntu-latest
    needs: build-app
    environment:
      name: development
    outputs:
      ecr_image: ${{ steps.push-ecr.outputs.image }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_CI_DEPLOYER_ROLE_ARN }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build amd64 Docker Image
        run: |
          docker build -t ${{ env.SERVICE_NAME }}:${{ needs.build-app.outputs.commit_sha }} .

      - name: Tag and Push Image to Amazon ECR
        id: push-ecr
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY }}
          ECR_IMAGE_TAG: ${{ needs.build-app.outputs.commit_sha }}
        run: |
          ECR_IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG"
          docker tag ${{ env.SERVICE_NAME }}:${{ needs.build-app.outputs.commit_sha }} $ECR_IMAGE
          docker push $ECR_IMAGE
          echo "image=$ECR_IMAGE" >> $GITHUB_OUTPUT

  deploy:
    name: deploy:dev
    runs-on: ubuntu-latest
    needs: build-amd64-image
    environment:
      name: development

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_CI_DEPLOYER_ROLE_ARN }}

      - name: Render task definition with environment variables and secrets
        env:
          IMAGE: ${{ needs.build-amd64-image.outputs.ecr_image }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          CRON_SCHEDULE_MINS: ${{ vars.CRON_SCHEDULE_MINS }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_NAME: ${{ vars.DB_NAME }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_PROXY_ENABLED: ${{ vars.DB_PROXY_ENABLED }}
          DB_IDLE_TIMEOUT_MS: ${{ vars.DB_IDLE_TIMEOUT_MS }}
          DB_MAX_CONNECTIONS: ${{ vars.DB_MAX_CONNECTIONS }}
          DB_USER: ${{ vars.DB_USER }}
          DB_TLS_DISABLED: ${{ vars.DB_TLS_DISABLED }}
          RABBIT_MQ_CONNECTION_STRING: ${{ vars.RABBIT_MQ_CONNECTION_STRING }}
          RABBIT_MQ_QUEUE_COUNT: ${{ vars.RABBIT_MQ_QUEUE_COUNT }}
          REDIS_HOST: ${{ vars.REDIS_HOST }}
          REDIS_PORT: ${{ vars.REDIS_PORT }}
          REDIS_AUTH_ARN: ${{ vars.REDIS_AUTH_ARN }}
          WS_IDLE_TIMEOUT_MS: ${{ vars.WS_IDLE_TIMEOUT_MS }}
          DB_PASSWORD_ARN: ${{ vars.DB_PASSWORD_ARN }}
          RDS_ROOT_CERTIFICATE_ARN: ${{ vars.RDS_ROOT_CERTIFICATE_ARN }}
        run: |
          envsubst < ecs/${{vars.STAGE}}/task-definition.json > ecs-task-definition.json

      - name: Register ECS task definition
        id: register-task
        run: |
          TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://ecs-task-definition.json \
            --region ${{ vars.AWS_REGION }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task-definition-arn=$TASK_DEFINITION_ARN" >> $GITHUB_OUTPUT

      - name: Deploy Amazon ECS service
        run: |
          aws ecs update-service \
            --region ${{ vars.AWS_REGION }} \
            --cluster ${{env.APP_NAME}}-${{ env.CLUSTER_NAME }}-${{vars.STAGE}}-ecs-cluster-ECSCluster-g8M6HWc0Cdph \
            --service ${{env.APP_NAME}}-${{ env.SERVICE_NAME }}-${{vars.STAGE}}-ecs-service-ECSService-nRbrd4FYxrs8 \
            --task-definition ${{ steps.register-task.outputs.task-definition-arn }} \
            --force-new-deployment
